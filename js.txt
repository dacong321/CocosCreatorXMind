函数数组的使用
let funArr = new Array();
let f1 = function(){console.log("my name is f1")};
let f2 = function(){console.log("my name is f2")};
funArr.push(f1);
funArr.push(f2);
console.log(funArr[0]); //--  输出function(){console.log("my name is f1")}
funArr[0]();
//------------------------------------------------------
类：  一个键值对的一个关系
例子1：
let SoundMJ = {
    name : value,
}
SoundMJ.func1 = function(){}
SoundMJ["key"] = value;
module.exports = SoundMJ; //-- 导出这个类。


例子2： 
module.exports = window.GG_DEFINE_CLASS("CityConfig", {
    cityId          : "base",
    isAll           : true,
    getCityConfig() {
    },
});


//-- 利用GG_DEFINE_CLASS函数重新构建这个类，将这个类的变量 添加get/set方法。
//-- 定义一个静态类
window.GG_DEFINE_CLASS = function (className, variableMap) {
    let variableList = {};
    let jsClass = {__className : className};
    for (const variableName in variableMap) {
        if (!(isLowerCase(variableName.charCodeAt(0)))) {
            cc.error("变量首字符不是字母或者小写！& ", variableName);
            return;
        }
        let variableValue = variableMap[variableName];
        if (typeof variableValue == "function") {
            jsClass[variableName] = variableValue;
            continue;
        }
        let setFun = null;
        let getFun = null;
        let defaultValue = null;
        if (!(variableValue instanceof Array) || variableValue.length == 0) {
            defaultValue = variableValue;
        } else {
            defaultValue = variableValue[0];
            setFun = variableValue[1];
            getFun = variableValue[2];
            if (typeof setFun != "function") {
                cc.error("set函数类型不正确", variableName);
                return;
            }
            if (typeof getFun != "function") {
                cc.error("get函数类型不正确", variableName);
                return;
            }
        }
        variableList[variableName] = defaultValue
        let funKey = variableName.slice(0, 1).toUpperCase() + variableName.slice(1);
        jsClass["set" + funKey] = setFun || function (value) {
            if (variableList[variableName] != null && typeof value != typeof variableList[variableName]) {
                cc.error("设置数据类型与默认数据类型不符,")
                return;
            }
            variableList[variableName] = value;
        }
        jsClass["get" + funKey] = getFun || function () {
            return variableList[variableName];
        }
    }
    return jsClass;
}


//------------------------------------------------------
//-- 定义常量
window.GG_DEFINE_CONST = function (jsClass, variableMap) {
    for (const variableName in variableMap) {
        jsClass[variableName] = variableMap[variableName];
    }
}

//-- 定义变量
GG_DEFINE_CONST(ggBase, {
    ENUM_TUO_GUAN : cc.Enum({
        normal      : 0,        //-- 不显示
        select      : 1,        //-- 选择
    }),
});
//------------------------------------------------------
ECMAScript 5 中引入了一个新方法：Object.create()。
可以调用这个方法来创建一个新对象。新对象的原型就是调用 create 方法时传入的第一个参数：
var o = {a:2, m:function(return this.a+1); };
let p = Object.create(o);
//-- p是一个继承o的对象
//------------------------------------------------------
立即执行函数（IIFE）的两种写法：
(function(){}());
(function(){})();
IIFE函数的调用方式通常是将函数表达式 ---> “function(){}”、
它的调用操作符 ---> "()"、
分组操作符---> (    )放到一个括号内，
来告诉解释器这里有一个需要立即执行的函数。否则通常情况下，解析器遇到一个function
关键字，都会把它当做是一个函数声明，而不是函数表达式。

对于常见的(function($){...})(jQuery);即是将实参jQuery传入函数function($){}，通过形参$接收。
在立即执行函数前可添加 防御型分号。


另一种
$(function(){/*...*/});是$(document).ready(function(){/*...*/})的简写形式，是在DOM加载完成后执行的回调函数，并且只会执行一次。
查jQuery的mdn得：
jQUery使用一种格式 $(selector).action() 将元素分配给事件。为了更详细地解释它，它$(selector) 将使jQuery选择元素 selector 并将它们分配给名为 的API事件 .action()。
再次举例：
$(document).ready(function(){
   alert("iHola Mundo!");
   $("blackBox").hide();
});
上述代码等效于：
window.onload = function(){
   alert("iHola Mundo!");
   document.getElementById("blackBox").style.display = "none";
}
//------------------------------------------------------
text-encode: 文本编码转换，常见的中日韩文转换成十六进制，或者将十六进制数据转换成目标编码的文本。
//------------------------------------------------------



